@model TurApp.Models.Sendero

@{
    //Layout = null;
    ViewBag.Title = "Senderos";
    Random rnd = new Random();
}


<style>
    .table-hover tbody tr:hover td, .table-hover tbody tr:hover th {
        background-color: #55b9a1;
    }

    .table-hover tbody tr:hover a {
        color: white;
    }

    .dataTables_wrapper .dataTables_paginate .paginate_button {
        padding: 0px;
    }


     .wrapper .overlay, .overlay-wrapper .overlay {
        z-index: 50;
        background: rgba(255,255,255,0.7);
        border-radius: 3px;
    }



    .wrapper > .overlay, .overlay-wrapper > .overlay, .box > .loading-img, .overlay-wrapper > .loading-img {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
    }
</style>


<!-- Header -->
<section class="content-header">
    <h1>
        Editar
        <small>Sendero</small>
    </h1>

    <ol class="breadcrumb">
        <li><a href="@Url.Action("Index","Home")"><i class="fa fa-dashboard"></i> Inicio</a></li>
        <li><a>Administración</a></li>
        <li><a href="@Url.Action("Index","Senderos")">Senderos</a></li>
        <li class="active">Editar</li>
    </ol>
</section>




<!-- Content -->
<div class="content">

    <!-- Box - Datos Sendero -->
    <div class="box box-primary">

        <div class="box-header">
            <h3 class="box-title">Datos Generales:</h3>
        </div>

        <div class="box-body">
            @using (Html.BeginForm("edit", "Senderos", FormMethod.Post, new { @id = "formSendero" }))
            {
            @Html.AntiForgeryToken()

            <div class="container">
                <div class="row">
                    <!-- Columna 1 -->
                    <div class="col-lg-6">
                        <!-- Fila 1 - Nombre-->
                        <div class="form-group">
                            <label class="control-label" for="Nombre">Nombre:</label>
                            <div>
                                @Html.EditorFor(model => model.Nombre, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Nombre, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <!-- Fila 2 - LugarInicio-->
                        <div class="form-group">
                            <label class="control-label" for="LugarInicio">Lugar de Inicio:</label>
                            <div>
                                @Html.EditorFor(model => model.LugarInicio, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.LugarInicio, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <!-- Fila 3 - LugarFin-->
                        <div class="form-group">
                            <label class="control-label" for="LugarFin">Lugar de Fin:</label>
                            <div>
                                @Html.EditorFor(model => model.LugarFin, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.LugarFin, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <!-- Fila 3 - TipoDificultadTecnicaID-->
                        <div class="form-group">
                            <label class="control-label " for="Apellido">Dificultad Tecnica:</label>
                            <div>
                                @Html.DropDownList("TipoDificultadTecnicaID", null, htmlAttributes: new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.TipoDificultadTecnicaID, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <!-- Fila 3 - TipoDificultadFisicaID-->
                        <div class="form-group">
                            <label class="control-label" for="TipoDificultadFisicaID">Dificultad Fisica:</label>
                            <div>
                                @Html.DropDownList("TipoDificultadFisicaID", null, htmlAttributes: new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.TipoDificultadFisicaID, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <!-- Fila 4 - Desnivel-->
                        <div class="form-group">
                            <label class="control-label" for="Desnivel">Desnivel:</label>
                            <div class="input-group">
                                @Html.EditorFor(model => model.Desnivel  ,new { htmlAttributes = new { @class = "form-control" , @readonly = "readonly" } })
                                <div class="input-group-addon">Metros</div>
                                @Html.ValidationMessageFor(model => model.Desnivel, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <!-- Fila 5 - Distancia-->
                        <div class="form-group">
                            <label class="control-label" for="Distancia">Distancia:</label>
                            <div class="input-group">
                                @Html.EditorFor(model => model.Distancia, new { htmlAttributes = new { @class = "form-control" , @readonly = "readonly" } })
                                <div class="input-group-addon">Kms</div>
                                @Html.ValidationMessageFor(model => model.Distancia, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <!-- Fila 6 - AlturaMaxima-->
                        <div class="form-group">
                            <label class="control-label" for="AlturaMaxima">AlturaMaxima:</label>
                            <div class="input-group">
                                @Html.EditorFor(model => model.AlturaMaxima, new { htmlAttributes = new { @class = "form-control" , @readonly = "readonly" } })
                                <div class="input-group-addon">m.s.n.m</div>
                                @Html.ValidationMessageFor(model => model.AlturaMaxima, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <!-- Fila 7 - DuracionTotal-->
                        <div class="form-group">
                            <label class="control-label" for="DuracionTotal">Duración:</label>
                            <div>
                                @Html.EditorFor(model => model.DuracionTotal, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.DuracionTotal, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <!-- Fila 2 -Archivo zipRecursosMapaOffline-->
                        <div class="form-group">
                            <label class="control-label" for="zipMapa">Zip Mapa:</label>
                            <div>
                                @Html.TextBox("zipMapa", "", htmlAttributes: new { @class = "form-control", type = "file", accept = ".zip" })
                                <p class="text-success">@ViewBag.Message2</p>
                            </div>
                        </div>
                    </div>

                    <!-- Columna 2 -->
                    <div class="col-lg-6">
                        <!-- Fila 1 - Descripcion-->
                        <div class="form-group" style="margin-bottom: 2%;">
                            <label class="control-label " for="Descripcion">Descripcion:</label>
                            <div>
                                @Html.TextAreaFor(model => model.Descripcion, new { @class = "form-control", rows = "5", style = "max-width:100%; margin-bottom: 3%;" } )
                                @*@Html.EditorFor(model => model.Descripcion, new { htmlAttributes = new { @class = "form-control", cols = "40", rows = "5" }})*@
                                @* <textarea class="form-control" rows="5" id="comment" style="max-width:100%;"></textarea>*@
                                @Html.ValidationMessageFor(model => model.Descripcion, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        
                        <!-- Fila 2 - InfoInteres-->
                        <div class="form-group" style="margin-bottom: 2%;">
                            <label class="control-label " for="InfoInteres">Informacion de Interes:</label>
                            <div>
                                @Html.TextAreaFor(model => model.InfoInteres, new { @class = "form-control", rows = "5", style = "max-width:100%; margin-bottom: 3%;" })
                                @Html.ValidationMessageFor(model => model.InfoInteres, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        
                        <!-- Fila 3 - Archivo Imagen-->
                        <div class="form-group">
                            <label class="control-label" for="Imagen">Imagen:</label>
                            <div>
                                @Html.TextBox("senderoImg", "", htmlAttributes: new { @class = "form-control", type = "file", accept = "image/*" })
                                <p class="text-success">@ViewBag.Message1</p>
                            </div>
                        </div>
                        
                        
                        <!-- Fila 3 - Vista previa Imagen-->
                        <div class="form-group">
                            <label class="control-label" for="Imagen">Vista previa:</label>
                            <div id="divImg">
                                @*<img src="@(String.IsNullOrEmpty(Model.RutaImagen)? Url.Content("~/Content/img/noimage.jpg"):Model.RutaImagen+"?"+rnd.Next(1,255))" class="img-responsive img-thumbnail" alt="Responsive image" style="min-width: 100%;">*@
                                <img src="@(String.IsNullOrEmpty(Model.RutaImagen)? Url.Content("~/Content/img/noimage.jpg"):Model.ImgBase64)" class="img-responsive img-thumbnail" alt="Responsive image" style="min-width: 100%;">
                            </div>
                        </div>
                    </div>
                </div>

                <div class="row pull-right" style="margin-right: 5%;">
                    <a href="@Url.Action("Index","Senderos")" class="btn btn-default">Cancelar</a>
                    <input id="btnGuardar" type="submit" class="btn btn-primary" value="Guardar" />
                </div>
            </div>

            @Html.HiddenFor(r=>r.RutaImagen)
            @Html.HiddenFor(r => r.RutZipMapa)
            @Html.HiddenFor(r => r.ImgBase64)



            }
        </div>
    </div>


    <!-- Box - Geolocalizacion -->
    <div class="box box-primary">

        <div class="box-header">
            <h3 class="box-title">Geolocalizacion:</h3>
        </div>

        <div class="box-body">
            <div class="container">
                <!-- Botones -->
                <div class="row">
                    <div class="col-md-4" style="margin-bottom: 15px;">
                        <input id="btnGetElevacion" class="btn btn-info" value="Obtener Elevacion" type="button" />
                        <input id="btnDeletePolyline" class="btn btn-default" value="Borrar Sendero" type="button" />
                    </div>
                    <div class="col-md-4" style="margin-bottom: 15px;">
                        <div class="checkbox">
                            <label><input id="chkIdaVuelta" type="checkbox" value="" @(Model.CalcularIdaVuelta==true?"checked":"")>Calcular distancia ida y vuelta</label>
                        </div>
                    </div>
                </div>
                <!--KML from file-->
                <div class="row">
                    <div class="col-md-4" style="margin-bottom: 15px;">
                        <div class="form-group">
                            <label class="control-label" for="Imagen">Cargar desde KML:</label>
                            <div>
                                @Html.TextBox("files", "", htmlAttributes: new { @class = "form-control", type = "file", accept = ".kml" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4" style="margin-bottom: 15px;">
                        <div id="btnKml" class="btn btn-default" style="margin-top: 8%;">Recargar desde KML</div>
                    </div>
                </div>

                <!--Mapa - tabla - grafico-->
                <div class="row">

                    <div class="col-md-8">
                        <!-- Mapa -->
                        <div class="row">
                            <div id="map" style="width: 100%; height: 450px; text-align: center; position: relative; overflow: hidden;"></div>
                        </div>

                        <!-- Chart -->
                        <div class="row" style="text-align:center; margi">
                            <h4><b>Grafico de Elevación</b></h4>
                            <div id="elevChart"></div>
                        </div>
                    </div>

                    <!-- Tabla -->
                    <div class="col-md-4">
                        <div class="table-responsive">
                            <table id="dtCoordenadas" class="table table-striped table-hover">
                                <thead>
                                    <tr><td colspan="4" style="text-align:center;background-color: #55b9a1;color: white; border-radius: 4px;"><b>Coordenadas</b></td></tr>
                                    <tr>
                                        <th>#</th>
                                        <th>Lat</th>
                                        <th>Long</th>
                                        <th>Accion</th>
                                    </tr>
                                </thead>
                                <tbody id="tblRows"></tbody>
                            </table>
                        </div>

                        @*<div id="output"></div>*@
                    </div>
                </div>




            </div>

        </div>
    </div>


</div>



<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDfmP3Pqo0aBdUZmidCxUsXQDS5NPYLang&libraries=geometry,drawing&ext=.js"></script>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>

<!-- Form and validations -->
<script>
    $('#senderoImg').change(function (e) {

        var ext = this.value.match(/\.([^\.]+)$/)[1];
        switch (ext) {
            case 'jpg':
                //case 'bmp':
            case 'png':
                //case 'tif':
                //alert('allowed');
                break;
            default:
                alert('Formato de archivo no valido.');
                this.value = '';
                var img = '<img src="/Content/img/noimage.jpg" class="img-responsive img-thumbnail" alt="Responsive image" style="min-width: 100%;">';
                $("#divImg").empty();
                $("#divImg").append(img);
                return;
        }
        handleFileSelect(e);
    });
    function handleFileSelect(evt) {
        var file = evt.target.files[0];
            var reader = new FileReader();
            // Closure to capture the file information.
            reader.onload = (function (theFile) {
                return function (e) {
                    var img = '<img src="' + e.target.result + '" class="img-responsive img-thumbnail" alt="Responsive image" style="min-width: 100%;">';
                    $("#divImg").empty();
                    $("#divImg").append(img);
                };
            })(file);
            // Read in the image file as a data URL.
            reader.readAsDataURL(file);
    }
    $('#zipMapa').change(function () {
        var ext = this.value.match(/\.([^\.]+)$/)[1];
        switch (ext) {
            case 'zip':
                //case 'bmp':
                //case 'png':
                //case 'tif':
                //alert('allowed');
                break;
            default:
                alert('Formato de archivo no valido.');
                this.value = '';
        }
    });


    function abrirWaitingLocal() {
        var waiting = '<div id="waiting" class="overlay"><i class="fa fa-refresh fa-spin"></i></div>';
        /*<div id="waiting" class="overlay overlay-wrapper"><i class="fa fa-refresh fa-spin"></i></div>*/
        $(".wrapper").append(waiting);
    }

    function cerrarWaitingLocal() {
        $("#waiting").remove();
    }
</script>


<!-- Submit -->
<script>
    //Submit
    $('#formSendero').submit(function () {

        debugger

        //DataSendero
        var data = {
            Nombre: $("#Nombre").val(),
            Descripcion: $("#Descripcion").val(),
            InfoInteres: $("#InfoInteres").val(),
            LugarInicio: $("#LugarInicio").val(),
            LugarFin: $("#LugarFin").val(),
            TipoDificultadTecnicaID: $("#TipoDificultadTecnicaID").val(),
            TipoDificultadFisicaID: $("#TipoDificultadFisicaID").val(),
            Desnivel: $("#Desnivel").val(),
            Distancia: $("#Distancia").val(),
            AlturaMaxima: $("#AlturaMaxima").val(),
            DuracionTotal: $("#DuracionTotal").val(),
            Latitud: map.getCenter().lat(),
            Longitud: map.getCenter().lng(),
            SenderoPuntoElevacion: pointsArray,//Puntos con elevacion... 255 puntos para dibujar graficos
            SenderoPunto: [], // Puntos originales para formar polyline
            SenderoPuntoInteres: [], // Puntos originales para formar polyline
            RutaImagen: $("#RutaImagen").val(),
            RutZipMapa: $("#RutZipMapa").val(),
            ImgBase64: $("#ImgBase64").val(),            
            CalcularIdaVuelta:$("#chkIdaVuelta")[0].checked,
        };

        if (polylinePath != null) {
        for (var i = 0; i < polylinePath.length; i++) {

            var SenderoPunto = {
                Latitud: polylinePath.b[i].lat(),
                Longitud: polylinePath.b[i].lng()
            };

            data.SenderoPunto.push(SenderoPunto);
            }
        }


        if (markers != null && markers.length > 0) {
            for (var i = 0; i < markers.length; i++) {
                var PuntoInteres = {
                    Descripcion: markers[i].title,
                    Latitud: markers[i].position.lat(),
                    Longitud: markers[i].position.lng(),
                    TipoPuntoInteresID: markers[i].typeId
                };
                data.SenderoPuntoInteres.push(PuntoInteres);
            }
        }

        // Checking whether FormData is available in browser
        if (window.FormData !== undefined) {
            // Create FormData object
            var formData = new FormData();

            //File 1
            var fileUpload1 = $("#senderoImg").get(0);
            if (fileUpload1.files.length) {
                var file1 = fileUpload1.files;
                formData.append("senderoImg", file1[0]);
            }


            //File 2
            var fileUpload2 = $("#zipMapa").get(0);
            if (fileUpload2.files.length) {
                var file2 = fileUpload2.files;
                formData.append("zipMapa", file2[0]);
            }
            //Append "data" to "formData"
            formData.append("Sendero", JSON.stringify(data));
        }
        //debugger
        if ($(this).valid()) {
            $.ajax({
                url: this.action,
                type: this.method,
                data: formData,
                dataType: 'json',//'multipart/form-data',
                contentType: false,
                processData: false,
                beforeSend: function (xhr) {
                    abrirWaitingLocal();
                },
                success: function (result) {
                    //debugger
                    cerrarWaitingLocal();
                    if (result.ok) {
                        jAlert("El sendero se actualizo correctamente", "Senderos", function () {
                            window.location.href = '/Senderos';
                        });
                    }
                    else {
                        jAlert("Ha ocurrido un error: " + result.msj, "Senderos");
                    }
                    return;
                },
                error: function (error) {
                    //debugger
                    cerrarWaitingLocal();
                    jAlert("Ha ocurrido un error", "Senderos");
                    console.log(error);
                    return;
                }
            });
        }
        return false;
    });





</script>

<!-- Map Management -->
<script>
    var polyline ;//= [];//Array de "Polylines"
    var polylinePath; // Almacena "Polyline.getPath();"
    var marker;
    var chartData = [];
    var map;
    var selectionPolyline;
    var pointsArray = [];
    var table;
    var drawingManager;
    var markers = [];

    function initMap() {
        //set center coordinate
        var myLat = @(String.IsNullOrEmpty(Model.Latitud)? "-31.5351832" : Model.Latitud)/*value*/;
        var myLng = @(String.IsNullOrEmpty(Model.Longitud)? "-68.5223334" : Model.Longitud) /*value*/;
        var center = {
            lat: myLat,
            lng: myLng
        };

        //create map
        map = new google.maps.Map(document.getElementById('map'), {
            zoom: 10,
            center: center,
            mapTypeId: 'satellite'
        });



        //Recupera los puntos Guardados(Sendero)
        var SenderoPuntos = [
            @foreach (var Punto in Model.SenderoPunto)
            {
                <text>
                    { lat: parseFloat("@Punto.Latitud"), lng: parseFloat("@Punto.Longitud") },
                </text>
            }
        ];

        if (SenderoPuntos.length>0) {
            //Genera "Polyline" con los puntos Guardados(Sendero)
            var PolylineSaved = new google.maps.Polyline({
                path: SenderoPuntos,
                editable: true,
                draggable: false,
                geodesic: true,
                strokeColor: "#00b3fd",
                strokeOpacity: 0.5,
                strokeWeight: 5,
            });

            //Se agrega el Polyline(Sendero) al Arry de "Polylines" (global)
            polyline=PolylineSaved;;

            //se guarda la ruta del Polyline en una variable global
            polylinePath = PolylineSaved.getPath();

            //se dibuja en el mapa el Sendero
            PolylineSaved.setMap(map);

            $('#btnGetElevacion').click();
        }



        //Recupera los puntos Guardados(Sendero)
        var PuntosInteres = [
        @foreach (var Punto in Model.SenderoPuntoInteres)
        {
            <text>
            {
                TipoPuntoInteresID: @Punto.TipoPuntoInteresID,
                Descripcion: "@Punto.Descripcion",
                Latitud: parseFloat("@Punto.Latitud"),
                Longitud: parseFloat("@Punto.Longitud"),
            },
            </text>
        }
        ];

        
        if (PuntosInteres.length>0) {
            debugger

            $.each(PuntosInteres,function(){
                debugger
                var PuntoInteres;

                switch (this.TipoPuntoInteresID) {
                    case 1:{

                        var icon = {
                            url: "/Content/img/inicio.png", // url
                            scaledSize: new google.maps.Size(30, 30), // scaled size
                        };

                        PuntoInteres= new google.maps.Marker({
                            position: {lat: this.Latitud, lng:this.Longitud},
                            map:map,
                            typeId:1,
                            type: "inicio",
                            icon: icon,
                            Draggable: true,
                            Title: 'Inicio'
                        });
                    }break;

                    case 2:{

                        var icon = {
                            url: "/Content/img/fin.png", // url
                            scaledSize: new google.maps.Size(30, 30), // scaled size
                        };

                        PuntoInteres= new google.maps.Marker({
                            position: {lat: this.Latitud, lng:this.Longitud},
                            map:map,
                            typeId:2,
                            type: "fin",
                            icon: icon,
                            Draggable: true,
                            Title: 'Inicio'
                        });
                    }break;

                    case 3:{

                        var icon = {
                            url: "/Content/img/mirador.png", // url
                            scaledSize: new google.maps.Size(30, 30), // scaled size
                        };

                        PuntoInteres= new google.maps.Marker({
                            position: {lat: this.Latitud, lng:this.Longitud},
                            map:map,
                            typeId:3,
                            type: "mirador",
                            icon: icon,
                            Draggable: true,
                            Title: this.Descripcion
                        });
                    }break;

                    case 4:{

                        var icon = {
                            url: "/Content/img/cumbre.png", // url
                            scaledSize: new google.maps.Size(30, 30), // scaled size
                        };

                        PuntoInteres= new google.maps.Marker({
                            position: {lat: this.Latitud, lng:this.Longitud},
                            map:map,
                            typeId:4,
                            type: "cumbre",
                            icon: icon,
                            Draggable: true,
                            Title: this.Descripcion
                        });
                    }break;
                }

                markers.push(PuntoInteres);
                PuntoInteres.index = markers.length - 1;
                                
                PuntoInteres.addListener("dblclick", function () {
                    //debugger
                    PuntoInteres.setMap(null);
                    markers.splice(PuntoInteres.index, 1);
                });
            });
        }
        
        

        



        






        addDrawingControl(map);

    }

    function addLine() {
        //debugger
        polylinePath.setMap(map);
    }

    function addDrawingControl(map) {
        //debugger
        //Create(Initialize) Drawing Manager
        drawingManager = new google.maps.drawing.DrawingManager({
            drawingMode: null,
            drawingControl: true,
            drawingControlOptions: {
                position: google.maps.ControlPosition.TOP_CENTER,
                drawingModes: [
                  google.maps.drawing.OverlayType.POLYLINE
                ]
            },
            polylineOptions: {//add drawing control
                editable: true,
                draggable: false,
                geodesic: true,
                strokeColor: "#00b3fd",
                strokeOpacity: 0.5,
                strokeWeight: 5,
            }
        });




        drawingManager.setMap(map);
        //end of add drawing control


        if (polyline!=null) {
            drawingManager.setOptions({
                drawingControl: false,
                drawingMode:null
            });
        }


        //add event listener 'polylinecomplete'
        google.maps.event.addListener(drawingManager, 'polylinecomplete', function (xpolyline) {
            //debugger
            //polylines.push(polyline);
            drawingManager.setOptions({
                drawingControl: false,
                drawingMode:null
            });
            polyline =xpolyline;
            polylinePath = xpolyline.getPath();
            $('#btnGetElevacion').click();
        });
        
        //add event listener 'markercomplete'
        google.maps.event.addListener(drawingManager, 'markercomplete', function (xmarker) {
            //debugger
            //alert("onMarkerComplete. \n Tipo de marcador: " + xmarker.type);
            xmarker.addListener("dblclick", function () {
                //debugger
                xmarker.setMap(null);
                markers.splice(xmarker.index, 1);
            });
            switch (xmarker.type) {
                case "inicio":
                case "fin": {
                    markers.push(xmarker);
                    xmarker.index = markers.length - 1;
                } break;
                case "mirador": {
                    jPrompt("Nombre del Mirador:", null, "Mirador", function (value) {
                        if (value == null || value.trim() == "") {
                            xmarker.setMap(null)
                        }
                        else {
                            xmarker.setMap(null)
                            xmarker.title = value;
                            xmarker.setMap(map)
                            markers.push(xmarker);
                            xmarker.index = markers.length - 1;
                        }
                    })
                } break;

                case "cumbre": {
                    jPrompt("Nombre/Descripcion de la Cumbre:", null, "Cumbre", function (value) {

                        if (value == null || value.trim() == "") {
                            xmarker.setMap(null)
                        }
                        else {
                            xmarker.setMap(null)
                            xmarker.title = value;
                            xmarker.setMap(map)
                            markers.push(xmarker);
                            xmarker.index = markers.length - 1;
                        }
                    })
                } break;
            }

            drawingManager.setOptions({
                drawingMode: null
            });
        });
        
        //Create CustomControls in map layer
        //CustomControlInicio
        var customControlDivInicio = document.createElement('div');
        CustomControl(customControlDivInicio, map, "inicio");
        customControlDivInicio.index = 1;
        map.controls[google.maps.ControlPosition.LEFT_CENTER].push(customControlDivInicio);
        //CustomControlFin
        var customControlDivFin = document.createElement('div');
        CustomControl(customControlDivFin, map, "fin");
        customControlDivFin.index = 2;
        map.controls[google.maps.ControlPosition.LEFT_CENTER].push(customControlDivFin);
        //CustomControlMirador
        var customControlDivMirador = document.createElement('div');
        CustomControl(customControlDivFin, map, "mirador");
        customControlDivMirador.index = 3;
        map.controls[google.maps.ControlPosition.LEFT_CENTER].push(customControlDivMirador);
        //CustomControlCumbre
        var customControlDivCumbre = document.createElement('div');
        CustomControl(customControlDivFin, map, "cumbre");
        customControlDivCumbre.index = 4;
        map.controls[google.maps.ControlPosition.LEFT_CENTER].push(customControlDivCumbre);
    }


    $('#btnGetElevacion').click(function () {

        //debugger

        if (polyline !=null) {


            //var htmlStr = "";
            var tableRows="";
            var path=[];
            var xy;


            //htmlStr += "polyline " + i + " # vertices=" + polylinePath.getLength() + " length=" + google.maps.geometry.spherical.computeLength(polylinePath).toFixed(2) + " km<br>";


            for (var j = 0; j < polylinePath.b.length ; j++) {
                //htmlStr += "&nbsp;&nbsp;" + polylines[i].getPath().getAt(j).toUrlValue(6) + "<br>";
                tableRows +=    '<tr>'
                    +               '<td>'+ j +'</td>'
                    +               '<td>'+ polylinePath.b[j].lat().toFixed(4) +'</td>'
                    +               '<td>'+ polylinePath.b[j].lng().toFixed(4) +'</td>'
                    +               '<td>'
                    +                   '<span data-placement="top" title="Eliminar" data-toggle="tooltip">'
                    +                   '<a class="btn btn-danger fa fa-trash" onclick="removeVertex('+j+')"></a>'//'<a onclick="removeVertex('+j+')">Eliminar</a>'
                    +                   '</span>'
                    +               '</td>'
                    +           '</tr>';
                path.push(polylinePath.getAt(j));
            }



            // Create an ElevationService.
            var elevator = new google.maps.ElevationService;
            //elevator.getElevationAlongPath({
            //    'path': path,
            //    'samples': 256
            //}, plotElevation);
            $('#elevChart').show();
            elevator.getElevationAlongPath({
                'path': path,
                'samples': 256
            },plotElevation);




            //if (!$.fn.dataTable.isDataTable('#dtCoordenadas')) {
            //debugger
            table = $('#dtCoordenadas').DataTable();

            table.destroy();

            document.getElementById('tblRows').innerHTML = tableRows;

            $.fn.DataTable.ext.pager.numbers_length=4;
            table = $('#dtCoordenadas').DataTable({
                "language": DataTableEsp(),
                "dom": 'tp',
                "ordering": false,
                "lengthChange": false,
            });

            //$('#dtCoordenadas').DataTable().draw()
            //table.page.len( 10 ).draw();
            //}
        }


    });



    $('#btnDeletePolyline').click(function() {
        debugger
        DeletePolyline();
    });


    function DeletePolyline() {
        if (polyline != null) {
            //eliminar polyline
            polyline.setMap(null);
            polyline=null;
            polylinePath=null;
            drawingManager.setOptions({
                drawingControl: true
            });

            if (marker!=null) {
                marker.setMap(null);
            }

            table.destroy();
            $('#tblRows').empty();


            $('#elevChart').hide();
            removeFormData();
        }
    }

    google.maps.event.addDomListener(window, "load", initMap);

    function fillFormData(maxElevation, elevChange, distance) {
        $("#AlturaMaxima").val(maxElevation.toFixed(2));   //m.s.n.m
        $("#Desnivel").val(elevChange.toFixed(2));         //metros


        if ($("#chkIdaVuelta").is(':checked')) {
            $("#Distancia").val(((distance*2) / 1000).toFixed(2));          //Kms
        }
        else {
            $("#Distancia").val((distance / 1000).toFixed(2));          //Kms
        }
    }
    function removeFormData() {
        $("#AlturaMaxima").val(null);   //m.s.n.m
        $("#Desnivel").val(null);         //metros
        $("#Distancia").val(null);          //Kms
    }


    function plotElevation(returnedElevations) {

        //debugger
        if (returnedElevations == null) {
            return;
        }
        var elevationCalc = null;

        pointsArray = [];
        var elevations = [];
        var locations = [];


        //GUARDAR ESTOS DATOS
        for (var i = 0; i < returnedElevations.length; i++) {
            elevations.push(returnedElevations[i].elevation);
            locations.push(returnedElevations[i].location);

            var point = {
                Latitud: returnedElevations[i].location.lat(),
                Longitud: returnedElevations[i].location.lng(),
                Altura: returnedElevations[i].elevation
            }

            pointsArray.push(point)
        }
        // smooth the data
        // display the results
        chartData = [];
        var ascent = getClimbTotalAscent(elevations);
        var descent = 0;
        var minElevation = elevations[0];
        var maxElevation = elevations[0];
        var distance = 0;
        var maxGradient = 0;
        var maxGradientAt = 0;
        var maxGradientDesc = 0;
        var maxGradientDescAt = 0;
        //debugger
        for (var i_10 = 0; i_10 < elevations.length; i_10++) {
            minElevation = Math.min(elevations[i_10], minElevation);
            maxElevation = Math.max(elevations[i_10], maxElevation);
            // calculate distance
            if (i_10 > 0) {
                var d = google.maps.geometry.spherical.computeDistanceBetween(locations[i_10 - 1], locations[i_10]);
                distance += d;
            }
            var elevation = elevations[i_10];

            var displayDistance = distance / 1000;

            chartData.push([displayDistance, elevation]);
            if (i_10 > 0) {
                var thisAscent = elevations[i_10] - elevations[i_10 - 1];
                if (thisAscent < 0) {
                    descent -= thisAscent;
                }
            }
        }
        var elevChange = maxElevation - minElevation;
        // chart
        var chart = $("#elevChart");
        chart.height(150);
        var chartMin = elevationChartMin(minElevation, maxElevation);
        var chartMax = elevationChartMax(minElevation, maxElevation);

        plot = $.plot(chart, [{ data: chartData, lines: { show: true, fill: true, fillColor: "#D9D9D9" } }], {
            grid: {
                hoverable: true,
                aboveData: true
            },
            yaxis: {
                min: chartMin,
                max: chartMax
            },
            crosshair: {
                mode: "x"
            },
            selection: {
                mode: "x",
                color: "red"
            },
            colors: ["#D9D9D9"]
        });
        //fill form data
        fillFormData(maxElevation, elevChange, distance);

        chart.on("mouseleave", function () {
            $("#tooltip").hide();
        });
        chart.bind("plotunselected", function () {
            if (selectionPolyline != null) {
                selectionPolyline.setMap(null);
            }
        });
        chart.bind("plotselected", function (event, ranges) {
            var from = ranges.xaxis.from;
            var to = ranges.xaxis.to;
            // get the start and end altitudes
            var fromIndex = getIndexForDistance(from);
            var fromElevation = chartData[fromIndex][1];
            var toIndex = getIndexForDistance(to);
            var toElevation = chartData[toIndex][1];
            var segmentDistance = to - from;
            // selected average %age
            var segmentDistanceInMetres = segmentDistance * 1000;
            var climbInMetres = Math.abs(toElevation - fromElevation);

            // show the segment on the map
            if (selectionPolyline != null) {
                selectionPolyline.setMap(null);
            }
            var sectionData = locations.slice(fromIndex, toIndex);
            var polyOptions = {
                map: map,
                strokeColor: "red",
                strokeWeight: 8,
                path: sectionData,
                zIndex: 1000
            };
            selectionPolyline = new google.maps.Polyline(polyOptions);
        });
        chart.bind("plothover", function (event, pos) {
            var dataset = plot.getData();
            var series = dataset[0];
            var j = getIndexForDistance(pos.x);
            $("#tooltip").hide();
            var y = series.data[j][1];
            var x = series.data[j][0];
            var name = "Elevation: " +
                addCommas(roundNumber(y, 0)) +
                " Metros" +
                "<br/>" +
                "Distance: " +
                addCommas(roundNumber(x, 1)) +
                " KM";
            showTooltip(pos.pageX, pos.pageY, name);
            // add marker
            if (marker == null || marker.getMap() == null) {
                marker = new google.maps.Marker({
                    position: locations[j],
                    map: map,
                    icon: {
                        url: "/Content/images/station6.png", //"Url.Content("~/Content/images/station6.png")",// "~/Content/images/station6.png",
                        anchor: new google.maps.Point(10, 10)
                    },
                    title: "Elevation: " +
                        addCommas(roundNumber(y, 0)) +
                        " Metros" +
                        ", distance: " +
                        addCommas(roundNumber(x, 1)) +
                        " KM"
                });
            }
            else {
                marker.setPosition(locations[j]);
            }
        });
    }







    function showTooltip(n, t, i) {
        $("#tooltip").length === 0 && $('<div id="tooltip"><\/div>').css({
            position: "absolute",
            display: "none",
            border: "1px solid #fdd",
            padding: "2px",
            "min-width": "150px",
            "background-color": "#fee",
            opacity: .8
        }).appendTo("body");
        n > $("body").width() - $("#tooltip").width() - 30 ? n = n - $("#tooltip").width() - 20 : n += 20;
        $("#tooltip").html(i).css({
            top: t,
            left: n
        }).show()
    }

    function getClimbTotalAscent(elevations) {
        "use strict";
        var ascent = 0;
        for (var i = 0; i < elevations.length; i++) {
            if (i > 0) {
                var thisAscent = elevations[i] - elevations[i - 1];
                if (thisAscent > 0) {
                    ascent += thisAscent;
                }
            }
        }
        return ascent;
    }



    function elevationChartMin(n, t) {
        var i = (t - n) / 5;
        return n - i > 0 ? n - i : null
    }

    function elevationChartMax(n, t) {
        var i = (t - n) / 5;
        return t + i
    }

    function getIndexForDistance(distance) {
        for (var i_11 = 0; i_11 < chartData.length; i_11++) {
            if (chartData[i_11][0] >= distance) {
                return i_11;
            }
        }
        return chartData.length - 1;
    }

    function roundNumber(n, t) {
        return Math.round(n * Math.pow(10, t)) / Math.pow(10, t)
    }

    function addCommas(n) {
        for (var u = n.toString(), i = u.split("."), t = i[0], f = i.length > 1 ? "." + i[1] : "", r = /(\d+)(\d{3})/; r.test(t) ;) t = t.replace(r, "$1,$2");
        return t + f
    }



    function removeVertex(vertexIndex) {
        //debugger
        polylinePath.removeAt(vertexIndex);
        $('#btnGetElevacion').click();
        marker.setMap(null);
    };



    $('tbody tr').mouseover(function(e) {


    });

    $(document).on("mouseenter mouseleave", "#tblRows tr", function (e) {

        //debugger

        if (e.type == "mouseenter") {
            // check if it is mouseenter, do something
            var vertexIndex = parseInt( e.currentTarget.cells[0].textContent);

            if (vertexIndex!=null) {

                if (marker == null || marker.getMap() == null) {
                    marker = new google.maps.Marker({
                        position: polylinePath.b[vertexIndex],
                        map: map,
                        icon: {
                            url: "/Content/images/station6.png",//"Url.Content("~/Content/images/station6.png")",// "~/Content/images/station6.png",
                            anchor: new google.maps.Point(10, 10)
                        }
                    });
                }
                else {
                    marker.setPosition(polylinePath.b[vertexIndex]);
                }
            }
        } else {
            // if not, mouseleave, do something
        }
    });



</script>


<!-- FileReader -->
<script>
    var fileContent;


    $("#files").change(function (evt) {
        debugger

        var files = evt.target.files; // FileList object

        // files is a FileList of File objects. List some properties.
        var output = [];
        for (var i = 0, f; f = files[i]; i++) {

            // Only process kml files.
            //if (!f.type.match('*.kml')) {
            //    continue;
            //}


            output.push('<li><strong>', escape(f.name), '</strong> (', f.type || 'n/a', ') - ',
                        f.size, ' bytes, last modified: ',
                        f.lastModifiedDate ? f.lastModifiedDate.toLocaleDateString() : 'n/a',
                        '</li>');

            var reader = new FileReader();

            // Closure to capture the file information.
            reader.onload = (function (theFile) {
                return function (e) {

                    fileContent = e.target.result;

                    drawPolilineFromKML();
                };
            })(f);

            // Read in the image file as a data URL.
            var result = reader.readAsText(f);
        }

        document.getElementById('list').innerHTML = '<ul>' + output.join('') + '</ul>';
    });

    $("#btnKml").click(function () {
        drawPolilineFromKML();
    });


    function drawPolilineFromKML() {

        if (fileContent==null ) {
            return;
        }

        DeletePolyline();


        var myParser = new geoXML3.parser();
        myParser.parseKmlString(fileContent);
        polyline = myParser.docs[0].gpolylines[0]
        polylinePath = polyline.getPath();
        drawingManager.setOptions({
            drawingControl: false,
            drawingMode: null
        });
        polyline.setOptions({
            editable: true,
            draggable: false,
            geodesic: true,
            strokeColor: "#00b3fd",
            strokeOpacity: 0.5,
            strokeWeight: 5,
        });
        polyline.setMap(map);
    }

</script>


<!-- Markers Management -->
<script>
    function CustomControl(controlDiv, map, tipo) {
        // Set CSS for the control border
        var controlUI = document.createElement('div');
        controlUI.style.backgroundColor = '#ffffff';
        controlUI.style.borderStyle = 'solid';
        controlUI.style.borderWidth = '1px';
        controlUI.style.borderColor = '#ffffff';
        controlUI.style.height = '24px';
        controlUI.style.width = '24px';
        controlUI.style.marginTop = '1px';
        controlUI.style.marginLeft = '5px';
        controlUI.style.paddingTop = '1px';
        controlUI.style.textAlign = 'center';
        controlDiv.appendChild(controlUI);
        // Set CSS for the control interior
        var controlText = document.createElement('img');
        controlText.style.width = '100%';
        controlText.style.height = 'auto';
        //controlText.innerHTML = 'Custom';
        controlUI.appendChild(controlText);
        switch (tipo) {
            case "inicio": {
                // Set CSS for the controls
                controlUI.title = 'Marcardor Inicio';
                controlText.src = "/Content/img/inicio.svg";
                // Setup the click and doubleclick event listeners
                google.maps.event.addDomListener(controlUI, 'click', onClickMarkerInicio);
            } break;
            case "fin": {
                // Set CSS for the controls
                controlUI.title = 'Marcardor Fin';
                controlText.src = "/Content/img/fin.svg";
                // Setup the click and doubleclick event listeners
                google.maps.event.addDomListener(controlUI, 'click', onClickMarkerFin);
            } break;
            case "mirador": {
                // Set CSS for the controls
                controlUI.title = 'Marcardor Mirador';
                controlText.src = "/Content/img/mirador.svg";
                // Setup the click and doubleclick event listeners
                google.maps.event.addDomListener(controlUI, 'click', onClickMarkerMirador);
            } break;
            case "cumbre": {
                // Set CSS for the controls
                controlUI.title = 'Marcardor Cumbre';
                controlText.src = "/Content/img/cumbre.svg";
                // Setup the click and doubleclick event listeners
                google.maps.event.addDomListener(controlUI, 'click', onClickMarkerCumbre);
            } break;
        }
    }

    function onClickMarkerInicio() {
        //debugger
        var icon = {
            url: "/Content/img/inicio.png", // url
            scaledSize: new google.maps.Size(30, 30), // scaled size
        };
        drawingManager.setOptions({
            drawingMode: 'marker',
            markerOptions: {
                typeId:1,
                type: "inicio",
                icon: icon,
                Draggable: true,
                Title: 'Inicio'
            }
        });
    }

    function onClickMarkerFin() {
        //debugger
        var icon = {
            url: "/Content/img/fin.png", // url
            scaledSize: new google.maps.Size(30, 30), // scaled size
        };
        drawingManager.setOptions({
            drawingMode: 'marker',
            markerOptions: {
                typeId: 2,
                type: "fin",
                icon: icon,
                Draggable: true,
                Title: 'Fin'
            }
        });
    }

    function onClickMarkerMirador() {
        //debugger
        var icon = {
            url: "/Content/img/mirador.png", // url
            scaledSize: new google.maps.Size(30, 30), // scaled size
        };
        drawingManager.setOptions({
            drawingMode: 'marker',
            markerOptions: {
                typeId: 3,
                type: "mirador",
                icon: icon,
                Draggable: true,
                Title: 'mirador'
            }
        });
    }

    function onClickMarkerCumbre() {
        // debugger
        var icon = {
            url: "/Content/img/cumbre.png", // url
            scaledSize: new google.maps.Size(30, 30), // scaled size
        };
        drawingManager.setOptions({
            drawingMode: 'marker',
            markerOptions: {
                typeId: 4,
                type: "cumbre",
                icon: icon,
                Draggable: true,
                Title: 'cumbre'
            }
        });
    }
</script>
<script src="~/Scripts/plugins/elevation/jquery.flot.min.js"></script>
<script src="~/Scripts/plugins/elevation/jquery.flot.selection.js"></script>


<script src="~/Scripts/plugins/geoxml3-kmz/ZipFile.complete.js"></script>
<script src="~/Scripts/plugins/geoxml3-kmz/geoxml3.js"></script>
